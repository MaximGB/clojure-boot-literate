#+TITLE: Литературный проект на Clojure/Boot
#+SETUPFILE: build/setup.org

* Содержание                                                       :noexport:TOC_4_org:
 - [[Быстрый старт][Быстрый старт]]
 - [[Спецификация проекта][Спецификация проекта]]
   - [[Зависимости][Зависимости]]
 - [[Требования к среде и проекту][Требования к среде и проекту]]
 - [[Библиотека вспомагательных блоков-функций для проекта][Библиотека вспомагательных блоков-функций для проекта]]
 - [[Boot-проект][Boot-проект]]
 - [[Код проекта][Код проекта]]
 - [[Footnotes][Footnotes]]

* Быстрый старт

  - Загрузить *Library of Babel* проекта, выполнив следующий кодовый блок
    src_emacs-lisp{(org-babel-lob-ingest "build/lob.org")}, для этого поставить курсор на блок и нажать C-c C-c.
  - Заполнить таблицу в разеделе [[#project-specification][Спецификация проекта]].
  - Прочитать раздел [[#env-requirements][Требования к среде и проекту]], привести среду в соответствие и сформировать скрипты для экспорта
    кода ~tangle.sh~ и ~tangle-all.sh~.
  - Запустить ~tangle-all.sh~ src_sh[:dir "."]{./tangle-all.sh}, для этого поставить курсор на блок и нажать C-c C-c,
    или запустить ~tangle-all.sh~ из терминала.
  - Построить проект с помощью *Boot* src_sh[:dir "."]{boot build}, для этого поставить курсор на блок и нажать C-c C-c.
    или запустить ~boot build~ из терминала.
  - Запустить проект
    src_sh[:dir "." :noweb yes]{java -jar <<get-specification-param(title="Целевая дирректория")>>/project.jar},
    для этого поставить курсор на блок и нажать C-c C-c, или запустить ~java jar target/project.jar~ из терминала.
  - Работать, переодически экспортируя и строя код.
  - Для экспорта документации в ~project.pdf~ нажать С-с С-e l p.

* Спецификация проекта
  :PROPERTIES:
  :CUSTOM_ID: project-specification
  :END:

  Спецификация проекта описана в таблице ниже. На базе спецификации формируется структура проекта, файлы
  *boot.properties* и *build.boot* и т.п.

  #+CAPTION: Спецификация
  #+NAME: project-specification
  | Свойство                        | Значение       |
  |---------------------------------+----------------|
  | Boot                            |                |
  |---------------------------------+----------------|
  | Версия                          | 2.6.0          |
  |---------------------------------+----------------|
  | Имя проекта                     | literate-boot  |
  | Версия проекта                  | 0.1.0-SNAPSHOT |
  | Расположение org-исходников     | org            |
  | Расположение тестов             | tests          |
  | Расположение classpath ресурсов | resources      |
  | Расположение прочих ресурсов    | assets         |
  | Целевая дирректория             | target         |
  | Пространство имён main          | core           |
  |---------------------------------+----------------|
  | Clojure                         | yes            |
  |---------------------------------+----------------|
  | Версия                          | 1.8.0          |
  | Расположение исходников         | src            |
  |---------------------------------+----------------|
  | ClojureScript                   | yes            |
  |---------------------------------+----------------|
  | Версия                          | 1.9.225        |
  | Расположение исходников         | src            |
  |---------------------------------+----------------|
  | Cider                           |                |
  |---------------------------------+----------------|
  | Версия                          | 0.13.0         |

** Зависимости

   Зависимости проекта указывается в таблицие зависимостей\\

   Указывается по одной зависимости в строке таблицы, колонки таблицы соответствуют опциям поддерживаемым [[https://github.com/cemerick/pomegranate][pomegranate]],
   который, в свою очередь, используется Boot для разрешения зависимостей[fn:1]:

   * *Имя*           - имя артифакта
   * *Версия*        - версия артифакта
   * *Область*       - область применения зависимости (dependency scope в терминах maven), можеть быть:
                       compile, provided, runtime, test, system, import
   * *Опциональная*  - флаг задающий опциональность зависимости, зависимость с любым значением в этой колонке, кроме "no"
                       и пустой строки считается, считается опциональной
   * *Классификатор* - Maven-классификатор
   * *Расширение*    - Maven-расширение (тип)
   * *Исключения*    - список транзитивных исключений для этой зависимости, указывается по одному значению в строке,
                       т.е. если для одной зависисмости надо указать больше одного исключения, то для второго и далее
                       исключений колонки: *имя*, *версия*, *область*, *опциональная* будут пустыми
   * *Классификатор* - Maven-классификатор исключения
   * *Расширение*    - Maven-расширение (тип) исключения
   * *Пояснение*     - эта колонка просто игнорируется, она служит для документации

  #+CAPTION: Зависимости
  #+ATTR_LATEX: :width \textwidth :align |l|r|r|c|r|r|l|r|r|l| :float nil
  #+NAME: project-dependencies
  | Имя | Версия | Область | Опциональная | Классификатор | Расширение | Исключения | Классификатор | Расширение | Пояснение |
  |-----+--------+---------+--------------+---------------+------------+------------+---------------+------------+-----------|
  |     |        |         |              |               |            |            |               |            |           |

* Требования к среде и проекту
  :PROPERTIES:
  :CUSTOM_ID: env-requirements
  :END:

  #+INCLUDE: "build/build.org" :minlevel 2

* Библиотека вспомагательных блоков-функций для проекта

  #+INCLUDE: "build/lob.org" :minlevel 2

* Boot-проект

  #+INCLUDE: "build/boot.org" :minlevel 2

* Код проекта

  #+INCLUDE: "org/core.org" :minlevel 2

* Footnotes

[fn:1] Для особо интересующихся см. документацию к функции cemeric.pomegranate.aether/resolve-dependencies
